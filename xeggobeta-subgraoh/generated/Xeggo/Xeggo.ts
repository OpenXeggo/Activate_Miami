// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelStream extends ethereum.Event {
  get params(): CancelStream__Params {
    return new CancelStream__Params(this);
  }
}

export class CancelStream__Params {
  _event: CancelStream;

  constructor(event: CancelStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get senderBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get recipientBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CreateStream extends ethereum.Event {
  get params(): CreateStream__Params {
    return new CreateStream__Params(this);
  }
}

export class CreateStream__Params {
  _event: CreateStream;

  constructor(event: CreateStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get deposit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WithdrawFromStream extends ethereum.Event {
  get params(): WithdrawFromStream__Params {
    return new WithdrawFromStream__Params(this);
  }
}

export class WithdrawFromStream__Params {
  _event: WithdrawFromStream;

  constructor(event: WithdrawFromStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Xeggo__getStreamResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Xeggo extends ethereum.SmartContract {
  static bind(address: Address): Xeggo {
    return new Xeggo("Xeggo", address);
  }

  balanceOf(streamId: BigInt, who: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(who)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(streamId: BigInt, who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromAddress(who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelStream(streamId: BigInt): boolean {
    let result = super.call("cancelStream", "cancelStream(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelStream(streamId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancelStream", "cancelStream(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt
  ): BigInt {
    let result = super.call(
      "createStream",
      "createStream(address,uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(stopTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_createStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createStream",
      "createStream(address,uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(stopTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deltaOf(streamId: BigInt): BigInt {
    let result = super.call("deltaOf", "deltaOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBigInt();
  }

  try_deltaOf(streamId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deltaOf", "deltaOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStream(streamId: BigInt): Xeggo__getStreamResult {
    let result = super.call(
      "getStream",
      "getStream(uint256):(address,address,uint256,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return new Xeggo__getStreamResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getStream(streamId: BigInt): ethereum.CallResult<Xeggo__getStreamResult> {
    let result = super.tryCall(
      "getStream",
      "getStream(uint256):(address,address,uint256,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Xeggo__getStreamResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  nextStreamId(): BigInt {
    let result = super.call("nextStreamId", "nextStreamId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextStreamId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextStreamId", "nextStreamId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFromStream(streamId: BigInt, amount: BigInt): boolean {
    let result = super.call(
      "withdrawFromStream",
      "withdrawFromStream(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawFromStream(
    streamId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawFromStream",
      "withdrawFromStream(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelStreamCall extends ethereum.Call {
  get inputs(): CancelStreamCall__Inputs {
    return new CancelStreamCall__Inputs(this);
  }

  get outputs(): CancelStreamCall__Outputs {
    return new CancelStreamCall__Outputs(this);
  }
}

export class CancelStreamCall__Inputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelStreamCall__Outputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateStreamCall extends ethereum.Call {
  get inputs(): CreateStreamCall__Inputs {
    return new CreateStreamCall__Inputs(this);
  }

  get outputs(): CreateStreamCall__Outputs {
    return new CreateStreamCall__Outputs(this);
  }
}

export class CreateStreamCall__Inputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateStreamCall__Outputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFromStreamCall extends ethereum.Call {
  get inputs(): WithdrawFromStreamCall__Inputs {
    return new WithdrawFromStreamCall__Inputs(this);
  }

  get outputs(): WithdrawFromStreamCall__Outputs {
    return new WithdrawFromStreamCall__Outputs(this);
  }
}

export class WithdrawFromStreamCall__Inputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromStreamCall__Outputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
